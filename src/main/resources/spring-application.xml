<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	   http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	   http://www.springframework.org/schema/tx
	   http://www.springframework.org/schema/tx/spring-tx.xsd
	   http://www.springframework.org/schema/aop
	   http://www.springframework.org/schema/aop/spring-aop.xsd
	   http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task-3.2.xsd">
    <!-- 启用注解 -->
    <context:annotation-config/>

    <!-- 自动扫描组件，当前采用整个工程扫描 -->
    <context:component-scan base-package="com.jxztev"/>

    <task:annotation-driven/>
    <!-- 扫描任务 -->
    <context:component-scan base-package="com.jxztev.task"/>

    <!--切面分析自动代理-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!--加载数据库配置信息到Spring容器当中 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:jdbc.properties</value>
        </property>
    </bean>

    <!-- 使用注解注入properties中的值,可以注入多个-->
    <bean id="systemConfig"
          class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:systemconfig.properties</value>
            </list>
        </property>
        <!-- 设置编码格式 -->
        <property name="fileEncoding" value="UTF-8"></property>
    </bean>

    <!--<bean id="acDataSource" class="com.alibaba.druid.pool.DruidDataSource"-->
          <!--init-method="init" destroy-method="close">-->
        <!--<property name="driverClassName" value="${jdbc.driverClasss}"/>-->
        <!--<property name="url" value="${jdbc.jdbcUrl}"/>-->
        <!--<property name="username" value="${jdbc.username}"/>-->
        <!--<property name="password" value="${jdbc.password}"/>-->

        <!--&lt;!&ndash; 初始化连接大小 &ndash;&gt;-->
        <!--<property name="initialSize" value="${jdbc.initialSize}"></property>-->
        <!--&lt;!&ndash; 连接池最大数量 &ndash;&gt;-->
        <!--<property name="maxActive" value="${jdbc.maxActive}"></property>-->
        <!--&lt;!&ndash; 连接池最小空闲&ndash;&gt;-->
        <!--<property name="minIdle" value="${jdbc.minIdle}"></property>-->
        <!--&lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="${jdbc.maxWait}"></property>-->

        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="60000"/>-->

        <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="300000"/>-->

        <!--<property name="testWhileIdle" value="true"/>-->
        <!--<property name="keepAlive" value="true"/>-->
        <!--<property name="killWhenSocketReadTimeout" value="false"/>-->

        <!--&lt;!&ndash; 这里建议配置为TRUE，防止取到的连接不可用 &ndash;&gt;-->
        <!--<property name="testOnBorrow" value="true"/>-->
        <!--<property name="testOnReturn" value="false"/>-->

        <!--&lt;!&ndash; 这里配置提交方式，默认就是TRUE，可以不用配置 &ndash;&gt;-->
        <!--<property name="defaultAutoCommit" value="true"/>-->

        <!--&lt;!&ndash; 验证连接有效与否的SQL，不同的数据配置不同 &ndash;&gt;-->
        <!--<property name="validationQuery">-->
            <!--<value>select * from dual</value>-->
        <!--</property>-->

        <!--&lt;!&ndash;-->
	  <!--打开PSCache，并且指定每个连接上PSCache的大小-->
	  <!--如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false-->
<!--&ndash;&gt;-->
        <!--<property name="poolPreparedStatements" value="true"/>-->
        <!--<property name="maxPoolPreparedStatementPerConnectionSize"-->
                  <!--value="20"/>-->

        <!--&lt;!&ndash; 配置监控统计拦截的filters，去掉后监控界面sql无法统计 &ndash;&gt;-->
        <!--<property name="filters" value="stat,wall,log4j2"/>-->

        <!--&lt;!&ndash;-->
			<!--如果配置了proxyFilters，此配置可以不配置-->
			<!--druid.stat.mergeSql=true 合并执行的相同sql，避免因为参数不同而统计多条sql语句-->
			<!--druid.stat.slowSqlMillis=10000 用来配置SQL慢的标准，执行时间超过slowSqlMillis的就是慢-->
		<!--<property name="connectionProperties" value="druid.stat.mergeSql=true;druid.stat.slowSqlMillis=10000" />-->
		 <!--&ndash;&gt;-->
        <!--&lt;!&ndash; 监控统计拦截的filters &ndash;&gt;-->
        <!--&lt;!&ndash; 并在filters属性中配置了log4j &ndash;&gt;-->
        <!--<property name="proxyFilters">-->
            <!--<list>-->
                <!--<ref bean="statFilter"/>-->
                <!--<ref bean="logFilter"/>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!-- 慢SQL记录-->
    <!--<bean id="statFilter" class="com.alibaba.druid.filter.stat.StatFilter">-->
        <!--<property name="mergeSql" value="true"/>-->
        <!--<property name="slowSqlMillis" value="10000"/>-->
        <!--<property name="logSlowSql" value="true"/>-->
    <!--</bean>-->

    <!--日志监控-->
    <!--<bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">-->
        <!--<property name="resultSetLogEnabled" value="false"/>-->
        <!--<property name="statementExecutableSqlLogEnable" value="true"/>-->
    <!--</bean>-->

    <!-- 配置druid监控spring jdbc -->
    <!--<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>-->
    <!--<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">-->
        <!--<property name="patterns">-->
            <!--<list>-->
                <!--<value>com.jxztev.service.*</value>-->
                <!--<value>com.jxztev.dao.*</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<aop:config>-->
        <!--<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut"/>-->
    <!--</aop:config>-->
    <!--druid 配置 end-->

    <!--配置jdbcTemplate模板 ,若采用JdbcDaoSupport,可以不需要配置模版 -->
    <!--<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">-->
        <!--<property name="dataSource">-->
            <!--<ref bean="acDataSource"/>-->
        <!--</property>-->
    <!--</bean>-->

    <!-- 配置namedParameterJdbcTemplate ，具名参数 -->
    <!--<bean id="namedParameterJdbcTemplate"-->
          <!--class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">-->
        <!--<constructor-arg ref="acDataSource"></constructor-arg>-->
    <!--</bean>-->

    <!-- mybatis和spring完美整合，不需要mybatis的配置映射文件 -->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
        <!--<property name="dataSource" ref="acDataSource"/>-->
        <!--<property name="configLocation" value="classpath:mybatis-config.xml"/>-->
        <!--&lt;!&ndash; 自动扫描mapping.xml文件 &ndash;&gt;-->
        <!--<property name="mapperLocations" value="classpath:mapping/**/*.xml"></property>-->
    <!--</bean>-->

    <!--<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">-->
        <!--<constructor-arg ref="sqlSessionFactory"/>-->
    <!--</bean>-->

    <!-- DAO接口所在包名，Spring会自动查找其下的类 ,包下的类需要使用@MapperScan注解,否则容器注入会失败,本框架在Dao层添加了@Repository,可不配置该注解 -->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
        <!--&lt;!&ndash;这里需要根据实际的DAO文件所在包配置&ndash;&gt;-->
        <!--<property name="basePackage" value="com.jxztev.dao"/>-->
        <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>-->
    <!--</bean>-->

    <!-- 事务管理-对象 -->
    <!--<bean id="transactionManager"-->
          <!--class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="acDataSource"/>-->
    <!--</bean>-->

    <!-- 事务管理-通知-->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
        <!--<tx:attributes>-->
            <!--<tx:method name="save*" propagation="REQUIRED"/>-->
            <!--<tx:method name="add*" propagation="REQUIRED"/>-->
            <!--<tx:method name="create*" propagation="REQUIRED"/>-->
            <!--<tx:method name="insert*" propagation="REQUIRED"/>-->
            <!--<tx:method name="update*" propagation="REQUIRED"/>-->
            <!--<tx:method name="delete*" propagation="REQUIRED"/>-->
            <!--<tx:method name="merge*" propagation="REQUIRED"/>-->
            <!--<tx:method name="del*" propagation="REQUIRED"/>-->
            <!--<tx:method name="remove*" propagation="REQUIRED"/>-->
            <!--<tx:method name="put*" propagation="REQUIRED"/>-->
            <!--<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>-->
            <!--<tx:method name="count*" propagation="SUPPORTS" read-only="true"/>-->
            <!--<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>-->
            <!--<tx:method name="list*" propagation="SUPPORTS" read-only="true"/>-->
            <!--<tx:method name="*" propagation="SUPPORTS" read-only="true"/>-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!-- 事物管理-组装 -->
    <!--<aop:config>-->
        <!--<aop:pointcut id="serviceMethod" expression="execution(* com.jxztev.service..*(..))"/>-->
        <!--<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice"/>-->
    <!--</aop:config>-->
</beans>